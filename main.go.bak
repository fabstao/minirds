package main

import (
	"fmt"
	"html/template"
	"log"
	"net/http"
	"time"

	"time"

	"github.com/julienschmidt/httprouter"

	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

var host = "localhost"
var port = "3306"
var user = "gouser"
var password = "gopasswd"

var tpl *template.Template

func init() {
	tpl = template.Must(template.ParseGlob("tps/*"))
}

//HandleError is a function...
func HandleError(w http.ResponseWriter, err error) {
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		log.Fatalln(err)
	}
}

//Registro is a function...
func Registro(w http.ResponseWriter, r *http.Request, _ httprouter.Params) {
	err := tpl.ExecuteTemplate(w, "registro.html", nil)
	HandleError(w, err)
}

//Login is a function...
func Login(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	err := tpl.ExecuteTemplate(w, "login.html", nil)
	HandleError(w, err)
}

//CreaServicio is a function...
func CreaServicio(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	err := tpl.ExecuteTemplate(w, "crea.html", nil)
	HandleError(w, err)
}

//Index is a function...
func Index(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	err := tpl.ExecuteTemplate(w, "index.html", nil)
	HandleError(w, err)
}

type ds1 struct {
	Test  string
	Value int
}

//Dashboard is a function...
func Dashboard(w http.ResponseWriter, r *http.Request, ps httprouter.Params) {
	err := tpl.ExecuteTemplate(w, "dashboard.html", ds1{Test: "OK", Value: 1})
	HandleError(w, err)
}

func main() {
	router := httprouter.New()
	router.GET("/", Index)
	router.GET("/registro.aspx", Registro)
	router.POST("/registro.aspx", Registro)
	router.GET("/crea.php", CreaServicio)
	router.POST("/crea.php", CreaServicio)
	router.GET("/login.aspx", Login)
	router.POST("/login.aspx", Login)
	router.GET("/dashboard.php", Dashboard)

	log.Fatal(http.ListenAndServe(":8800", router))
}

//**************************************************+
func checknodes() {
	// creates the in-cluster config
	config, err := rest.InClusterConfig()
	if err != nil {
		panic(err.Error())
	}
	// creates the clientset
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}
	//clientset.Scheduling()
	for {
		pods, err := clientset.CoreV1().Pods("").List(metav1.ListOptions{})
		if err != nil {
			panic(err.Error())
		}
		fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))

		// Examples for error handling:
		// - Use helper functions like e.g. errors.IsNotFound()
		// - And/or cast to StatusError and use its properties like e.g. ErrStatus.Message
		_, err = clientset.CoreV1().Pods("default").Get("example-xxxxx", metav1.GetOptions{})
		if errors.IsNotFound(err) {
			fmt.Printf("Pod not found\n")
		} else if statusError, isStatus := err.(*errors.StatusError); isStatus {
			fmt.Printf("Error getting pod %v\n", statusError.ErrStatus.Message)
		} else if err != nil {
			panic(err.Error())
		} else {
			fmt.Printf("Found pod\n")
		}

		time.Sleep(10 * time.Second)
	}
}

//pvclaim := clientset.CoreV1().PersistentVolumeClaims(apiv1.NamespaceDefault)
//pvc, err := pvclaim.Get(appName, metav1.GetOptions{})
/* pvcspec := &apiv1.PersistentVolumeClaim{
	TypeMeta: metav1.TypeMeta{
		Kind:       "PersistentVolumeClaim",
		APIVersion: "v1",
	},
	ObjectMeta: metav1.ObjectMeta{
		Name: appName + "vol",
		Labels: map[string]string{
			"app": appName,
		},
	},
	Spec: apiv1.PersistentVolumeClaimSpec{
		AccessModes: []apiv1.PersistentVolumeAccessMode{
			"ReadWriteOnce",
		},
		Resources: apiv1.ResourceRequirements{
			Requests: apiv1.ResourceList{
				"Storage": resource.Quantity{Format: resource.Format, d: intDecAmount(1000)},
			},
		},
	},
} */
